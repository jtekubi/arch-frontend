import * as React from 'react';
import { FieldInputProps, FieldMetaProps, FieldValidator, FormikContextType } from './types';
import { FieldHelperProps } from './types';
export declare type UseFieldProps<V = any> = {
    /**
     * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.
     */
    as?: string | React.ComponentType<FieldInputProps<V>> | React.ComponentType | React.ForwardRefExoticComponent<any>;
    /**
     * Validate a single field value independently
     */
    validate?: FieldValidator;
    /**
     * Function to parse raw input value before setting it to state
     */
    parse?: (value: unknown, name: string) => V;
    /**
     * Function to transform value passed to input
     */
    format?: (value: V, name: string) => any;
    /**
     * Wait until blur event before formatting input value?
     * @default false
     */
    formatOnBlur?: boolean;
    /**
     * HTML multiple attribute
     */
    multiple?: boolean;
    /**
     * Field name
     */
    name: string;
    /** HTML input type */
    type?: string;
    /** Field value */
    value?: any;
};
/**
 * Returns Formik field value updater function
 * @public
 */
export declare function useSetFieldValue<Values>(): FormikContextType<Values>['setFieldValue'];
/**
 * Returns Formik field touched updater function
 * @public
 */
export declare function useSetFieldTouched<Values>(): FormikContextType<Values>['setFieldTouched'];
export declare function useField<FieldValues = any>(nameOrOptions: string | UseFieldProps<FieldValues>): [FieldInputProps<FieldValues>, FieldMetaProps<FieldValues>, FieldHelperProps<FieldValues>];
/**
 * Returns the value and an updater function of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldValue<Values>(name: string): [any | undefined, (error: any) => void];
/**
 * Returns error message state and an updater function of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldError<Values>(name: string): [any | undefined, (error: any) => void];
/**
 * Returns touched state and updater function of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldTouched<Values>(name: string): [boolean, (error: any) => void];
/**
 * Returns initial value of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldInitialValue<Values>(name: string): any;
/**
 * Returns initial touched state of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldInitialTouched<Values>(name: string): any;
/**
 * Returns initial error message of a given field
 * @param name The name of the field
 * @public
 */
export declare function useFieldInitialError<Values>(name: string): any;
/**
 * Returns initial Formik values
 * @public
 */
export declare function useInitialValues<Values>(): Values;
/**
 * Returns initial Formik touched
 * @public
 */
export declare function useInitialTouched<Values>(): import("./types").FormikTouched<Values>;
/**
 * Returns initial Formik errors
 * @public
 */
export declare function useInitialErrors<Values>(): import("./types").FormikErrors<Values>;
/**
 * Returns initial Formik status
 * @public
 */
export declare function useInitialStatus<Values>(): any;
/**
 * Returns Formik errors and updater function
 * @public
 */
export declare function useErrors<Values>(): (import("./types").FormikErrors<Values> | ((errors: import("./types").FormikErrors<Values>) => void))[];
/**
 * Returns Formik values and updater function
 * @public
 */
export declare function useValues<Values>(): (Values | ((values: React.SetStateAction<Values>, shouldValidate?: boolean | undefined) => void))[];
/**
 * Returns Formik touched state and updater function
 * @public
 */
export declare function useTouched<Values>(): (import("./types").FormikTouched<Values> | ((touched: import("./types").FormikTouched<Values>, shouldValidate?: boolean | undefined) => void))[];
/**
 * Returns Formik touched updater function
 * @public
 */
export declare function useSetTouched<Values>(): (touched: import("./types").FormikTouched<Values>, shouldValidate?: boolean | undefined) => void;
/**
 * Returns Formik values updater function
 * @public
 */
export declare function useSetValues<Values>(): (values: React.SetStateAction<Values>, shouldValidate?: boolean | undefined) => void;
/**
 * Returns Formik errors updater function
 * @public
 */
export declare function useSetErrors<Values>(): (errors: import("./types").FormikErrors<Values>) => void;
/**
 * Returns Formik status state and updater function
 * @public
 */
export declare function useStatus<T>(): (((status?: any) => void) | T)[];
/**
 * Returns Formik status updater function
 * @public
 */
export declare function useSetStatus(): (status?: any) => void;
/**
 * Returns a function to imperatively submit the form
 * @public
 */
export declare function useSubmitForm(): (() => Promise<void>) & (() => Promise<any>);
/**
 * Returns whether the form submission is currently being attempted
 * @public
 */
export declare function useIsSubmitting(): boolean;
/**
 * Returns function to reset the form
 * @public
 */
export declare function useResetForm(): (nextState?: Partial<import("./types").FormikState<unknown>> | undefined) => void;
/**
 *
 * Returns whether the form submission is currently being attempted
 * @public
 */
export declare function useIsValid(): boolean;
/**
 * Returns whether the form is dirty
 * @public
 */
export declare function useIsDirty(): boolean;
/**
 * Returns a function to imperatively validate the entire form
 * @public
 */
export declare function useValidateForm(): (values?: any) => Promise<import("./types").FormikErrors<unknown>>;
/**
 * Returns a function to imperatively validate a field
 * @public
 */
export declare function useValidateField(fieldName?: string): () => void | ((field: string) => void);
