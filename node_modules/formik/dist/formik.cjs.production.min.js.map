{"version":3,"file":"formik.cjs.production.min.js","sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/hooks.tsx","../src/Form.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/FastField.tsx","../src/Field.tsx","../src/withFormik.tsx"],"sourcesContent":["import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/** @private Are we in RN? */\nexport const isReactNative =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.product &&\n  window.navigator.product === 'ReactNative';\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n/** Return multi select values based on an array of options */\nexport function getSelectedValues(options: any[]) {\n  const result = [];\n  if (options) {\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n  return result;\n}\n\n/** Return the next value for a checkbox */\nexport function getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\nexport const defaultParseFn = (value: unknown, _name: string) => value;\n\nexport const numberParseFn = (value: any, _name: string) => {\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? '' : parsed;\n};\n\nexport const defaultFormatFn = (value: unknown, _name: string) =>\n  value === undefined ? '' : value;\n\n/** Get the value out of a React Synthetic event given some form state. Works cross-platform. */\nexport const getValueFromEvent = (\n  event: React.SyntheticEvent<any>,\n  valueState: any\n) => {\n  // React Native/Expo Web/maybe other render envs\n  if (\n    !isReactNative &&\n    event.nativeEvent &&\n    (event.nativeEvent as any).text !== undefined\n  ) {\n    return (event.nativeEvent as any).text;\n  }\n\n  // React Native\n  if (isReactNative && event.nativeEvent) {\n    return (event.nativeEvent as any).text;\n  }\n\n  const target = event.target ? event.target : event.currentTarget;\n  const { type, value, checked, options, multiple } = target;\n\n  return /checkbox/.test(type) // checkboxes\n    ? getValueForCheckbox(valueState, checked, value)\n    : !!multiple // <select multiple>\n    ? getSelectedValues(options)\n    : value;\n};\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport {\n  createContext,\n  useContext,\n  useContextSelector,\n} from 'use-context-selector';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = createContext<FormikContextType<any>>(\n  undefined as any\n);\n\nexport const FormikProvider = FormikContext.Provider;\n\nexport function useFormikContext<Values>() {\n  return useContext<FormikContextType<Values>>(FormikContext);\n}\n\nexport function FormikConsumer<Values = any>({\n  children,\n}: {\n  children: (formik: FormikContextType<Values>) => React.ReactNode;\n}) {\n  const formik = useFormikContext<Values>();\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return <>{children(formik)}</>;\n}\n\nexport function useFormikContextSelector<Values = any, Slice = any>(\n  selector: (value: FormikContextType<Values>) => Slice\n): Slice {\n  return useContextSelector(FormikContext, selector);\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FormikHelpers,\n  FormikHandlers,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  isObject,\n  isInputEvent,\n  isReactNative,\n  getSelectedValues,\n  getValueForCheckbox,\n  defaultParseFn,\n  numberParseFn,\n  defaultFormatFn,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          if (!isEqual(state.errors, combinedErrors)) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n      }\n\n      if (validateOnMount) {\n        validateFormWithHighPriority(initialValues.current);\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: error[name] },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : !!multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = useEventCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    }\n  );\n\n  const getValueFromEvent = useEventCallback(\n    (event: React.SyntheticEvent<any>, fieldName: string) => {\n      // React Native/Expo Web/maybe other render envs\n      if (\n        !isReactNative &&\n        event.nativeEvent &&\n        (event.nativeEvent as any).text !== undefined\n      ) {\n        return (event.nativeEvent as any).text;\n      }\n\n      // React Native\n      if (isReactNative && event.nativeEvent) {\n        return (event.nativeEvent as any).text;\n      }\n\n      const target = event.target ? event.target : event.currentTarget;\n      const { type, value, checked, options, multiple } = target;\n\n      return /checkbox/.test(type) // checkboxes\n        ? getValueForCheckbox(getIn(state.values, fieldName!), checked, value)\n        : !!multiple // <select multiple>\n        ? getSelectedValues(options)\n        : value;\n    }\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject\n        ? nameOrOptions.name\n          ? nameOrOptions.name\n          : nameOrOptions.id\n        : nameOrOptions;\n      const valueState = getIn(state.values, name);\n      const touchedState = getIn(state.touched, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n          parse = /number|range/.test(type) ? numberParseFn : defaultParseFn,\n          format = defaultFormatFn,\n          formatOnBlur = false,\n        } = nameOrOptions;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n\n        if (type !== 'radio' && type !== 'checkbox' && !!format) {\n          if (formatOnBlur === true) {\n            if (touchedState === true) {\n              field.value = format(field.value);\n            }\n          } else {\n            field.value = format(field.value);\n          }\n        }\n\n        // We incorporate the fact that we know the `name` prop by scoping `onChange`.\n        // In addition, to support `parse` fn, we can't just re-use the OG `handleChange`, but\n        // instead re-implement it's guts.\n        if (type !== 'radio' && type !== 'checkbox') {\n          field.onChange = (eventOrValue: React.ChangeEvent<any> | any) => {\n            if (isInputEvent(eventOrValue)) {\n              if (eventOrValue.persist) {\n                eventOrValue.persist();\n              }\n              setFieldValue(name, parse(getValueFromEvent(eventOrValue, name)));\n            } else {\n              setFieldValue(name, parse(eventOrValue));\n            }\n          };\n        }\n      }\n      return field;\n    },\n    [\n      getValueFromEvent,\n      handleBlur,\n      handleChange,\n      setFieldValue,\n      state.touched,\n      state.values,\n    ]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  const validateData: FormikValues = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport invariant from 'tiny-warning';\nimport {\n  FieldInputProps,\n  FieldMetaProps,\n  FieldValidator,\n  FormikContextType,\n} from './types';\nimport { useFormikContextSelector } from './FormikContext';\nimport {\n  defaultFormatFn,\n  defaultParseFn,\n  getIn,\n  getValueFromEvent,\n  isInputEvent,\n  isObject,\n  numberParseFn,\n} from './utils';\nimport { FieldHelperProps } from './types';\n\nexport type UseFieldProps<V = any> = {\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | string\n    | React.ComponentType<FieldInputProps<V>>\n    | React.ComponentType\n    | React.ForwardRefExoticComponent<any>;\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Function to parse raw input value before setting it to state\n   */\n  parse?: (value: unknown, name: string) => V;\n\n  /**\n   * Function to transform value passed to input\n   */\n  format?: (value: V, name: string) => any;\n\n  /**\n   * Wait until blur event before formatting input value?\n   * @default false\n   */\n  formatOnBlur?: boolean;\n\n  /**\n   * HTML multiple attribute\n   */\n  multiple?: boolean;\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n};\n\n/**\n * Returns Formik field value updater function\n * @public\n */\nexport function useSetFieldValue<\n  Values\n>(): FormikContextType<Values>['setFieldValue'] {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setFieldValue']\n  >(ctx => ctx.setFieldValue);\n}\n\n/**\n * Returns Formik field touched updater function\n * @public\n */\nexport function useSetFieldTouched<\n  Values\n>(): FormikContextType<Values>['setFieldTouched'] {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setFieldTouched']\n  >(ctx => ctx.setFieldTouched);\n}\n\nexport function useField<FieldValues = any>(\n  nameOrOptions: string | UseFieldProps<FieldValues>\n): [\n  FieldInputProps<FieldValues>,\n  FieldMetaProps<FieldValues>,\n  FieldHelperProps<FieldValues>\n] {\n  const isAnObject = isObject(nameOrOptions);\n  // Normalize propsOrFieldName to FieldConfig<Value>\n  const props: UseFieldProps<FieldValues> = isAnObject\n    ? (nameOrOptions as UseFieldProps<FieldValues>)\n    : ({ name: nameOrOptions as string } as UseFieldProps<FieldValues>);\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  const registerField = useFormikContextSelector(c => c.registerField);\n\n  const unregisterField = useFormikContextSelector(c => c.unregisterField);\n\n  React.useEffect(() => {\n    invariant(\n      fieldName,\n      'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n    );\n\n    invariant(\n      registerField,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  const meta = useFieldMeta(fieldName);\n  const { value: valueState, touched: touchedState } = meta;\n  const setFieldValue = useSetFieldValue();\n  const setFieldTouched = useSetFieldTouched();\n  const getFieldHelpers = useFormikContextSelector(ctx => ctx.getFieldHelpers);\n\n  const field: FieldInputProps<any> = {\n    name: fieldName,\n    value: valueState,\n    // We incorporate the fact that we know the `name` prop by scoping `onChange` and `onBlur`.\n    // In addition, to support `parse` fn, we can't just re-use the OG `handleChange` and `handleBlur`, but\n    // instead re-implement it's guts.\n    onChange: (eventOrValue: React.ChangeEvent<any> | any) => {\n      if (isInputEvent(eventOrValue)) {\n        if (eventOrValue.persist) {\n          eventOrValue.persist();\n        }\n        setFieldValue(\n          fieldName,\n          parse(getValueFromEvent(eventOrValue, valueState), fieldName)\n        );\n      } else {\n        setFieldValue(fieldName, parse(eventOrValue, fieldName));\n      }\n    },\n    onBlur: (eventOrValue: React.SyntheticEvent<any> | boolean) => {\n      if (isInputEvent(eventOrValue)) {\n        if (eventOrValue.persist) {\n          eventOrValue.persist();\n        }\n        setFieldTouched(fieldName, true);\n      } else {\n        setFieldValue(fieldName, eventOrValue);\n      }\n    },\n  };\n\n  const {\n    type,\n    value: valueProp, // value is special for checkboxes\n    as: is,\n    multiple,\n    parse = /number|range/.test(type ?? '') ? numberParseFn : defaultParseFn,\n    format = defaultFormatFn,\n    formatOnBlur = false,\n  } = nameOrOptions as UseFieldProps<FieldValues>; // @todo why is this type failing?\n\n  if (type === 'checkbox') {\n    if (valueProp === undefined) {\n      field.checked = !!valueState;\n    } else {\n      field.checked = !!(\n        Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n      );\n      field.value = valueProp;\n    }\n  } else if (type === 'radio') {\n    field.checked = valueState === valueProp;\n    field.value = valueProp;\n  } else if (is === 'select' && multiple) {\n    field.value = field.value || [];\n    field.multiple = true;\n  }\n\n  if (type !== 'radio' && type !== 'checkbox' && !!format) {\n    if (formatOnBlur === true) {\n      if (touchedState === true) {\n        field.value = format(field.value, fieldName);\n      }\n    } else {\n      field.value = format(field.value, fieldName);\n    }\n  }\n\n  return [field, meta, getFieldHelpers(fieldName)];\n}\n\n/**\n * Returns the value and an updater function of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldValue<Values>(\n  name: string\n): [any | undefined, (error: any) => void] {\n  const state = useFormikContextSelector<Values>(ctx =>\n    getIn(ctx.values, name)\n  );\n\n  const set = useSetFieldValue<Values>();\n\n  const setState = React.useCallback(\n    (value: any, shouldValidate?: boolean) => {\n      set(name, value, shouldValidate);\n    },\n    [name]\n  );\n\n  return [state, setState];\n}\n\n/**\n * Returns error message state and an updater function of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldError<Values>(\n  name: string\n): [any | undefined, (error: any) => void] {\n  const state = useFormikContextSelector<Values, any | undefined>(ctx =>\n    getIn(ctx.errors, name)\n  );\n\n  const set = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setFieldError']\n  >(ctx => ctx.setFieldError);\n\n  const setState = React.useCallback(\n    (error: any) => {\n      set(name, error);\n    },\n    [name]\n  );\n\n  return [state, setState];\n}\n\n/**\n * Returns touched state and updater function of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldTouched<Values>(\n  name: string\n): [boolean, (error: any) => void] {\n  const state = useFormikContextSelector<Values, boolean>(ctx =>\n    Boolean(getIn(ctx.touched, name))\n  );\n\n  const set = useSetFieldTouched<Values>();\n\n  const setState = React.useCallback(\n    (isTouched?: boolean, shouldValidate?: boolean) => {\n      set(name, isTouched, shouldValidate);\n    },\n    [name]\n  );\n\n  return [state, setState];\n}\n\n/**\n * Returns initial value of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldInitialValue<Values>(name: string) {\n  return useFormikContextSelector<Values, any | undefined>(ctx =>\n    getIn(ctx.initialValues, name)\n  );\n}\n\n/**\n * Returns initial touched state of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldInitialTouched<Values>(name: string) {\n  return useFormikContextSelector<Values>(ctx =>\n    Boolean(getIn(ctx.initialTouched, name))\n  );\n}\n\n/**\n * Returns initial error message of a given field\n * @param name The name of the field\n * @public\n */\nexport function useFieldInitialError<Values>(name: string) {\n  return useFormikContextSelector<Values>(ctx =>\n    getIn(ctx.initialErrors, name)\n  );\n}\n\n/**\n * Returns initial Formik values\n * @public\n */\nexport function useInitialValues<Values>() {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['initialValues']\n  >(ctx => ctx.initialValues);\n}\n\n/**\n * Returns initial Formik touched\n * @public\n */\nexport function useInitialTouched<Values>() {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['initialTouched']\n  >(ctx => ctx.initialTouched);\n}\n\n/**\n * Returns initial Formik errors\n * @public\n */\nexport function useInitialErrors<Values>() {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['initialErrors']\n  >(ctx => ctx.initialErrors);\n}\n\n/**\n * Returns initial Formik status\n * @public\n */\nexport function useInitialStatus<Values>() {\n  return useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['initialStatus']\n  >(ctx => ctx.initialStatus);\n}\n\n/**\n * Returns Formik errors and updater function\n * @public\n */\nexport function useErrors<Values>() {\n  const state = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['errors']\n  >(ctx => ctx.errors);\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setErrors']\n  >(ctx => ctx.setErrors);\n  return [state, update];\n}\n\n/**\n * Returns Formik values and updater function\n * @public\n */\nexport function useValues<Values>() {\n  const state = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['values']\n  >(ctx => ctx.values);\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setValues']\n  >(ctx => ctx.setValues);\n  return [state, update];\n}\n\n/**\n * Returns Formik touched state and updater function\n * @public\n */\nexport function useTouched<Values>() {\n  const state = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['touched']\n  >(ctx => ctx.touched);\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setTouched']\n  >(ctx => ctx.setTouched);\n  return [state, update];\n}\n\n/**\n * Returns Formik touched updater function\n * @public\n */\nexport function useSetTouched<Values>() {\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setTouched']\n  >(ctx => ctx.setTouched);\n  return update;\n}\n\n/**\n * Returns Formik values updater function\n * @public\n */\nexport function useSetValues<Values>() {\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setValues']\n  >(ctx => ctx.setValues);\n  return update;\n}\n\n/**\n * Returns Formik errors updater function\n * @public\n */\nexport function useSetErrors<Values>() {\n  const update = useFormikContextSelector<\n    Values,\n    FormikContextType<Values>['setErrors']\n  >(ctx => ctx.setErrors);\n  return update;\n}\n\n/**\n * Returns Formik status state and updater function\n * @public\n */\nexport function useStatus<T>() {\n  const state: T = useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['status']\n  >(ctx => ctx.status);\n  const update = useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['setStatus']\n  >(ctx => ctx.setStatus);\n  return [state, update];\n}\n\n/**\n * Returns Formik status updater function\n * @public\n */\nexport function useSetStatus() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['setStatus']\n  >(ctx => ctx.setStatus);\n}\n\n/**\n * Returns a function to imperatively submit the form\n * @public\n */\nexport function useSubmitForm() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['submitForm']\n  >(ctx => ctx.submitForm);\n}\n\n/**\n * Returns whether the form submission is currently being attempted\n * @public\n */\nexport function useIsSubmitting() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['isSubmitting']\n  >(ctx => ctx.isSubmitting);\n}\n\n/**\n * Returns function to reset the form\n * @public\n */\nexport function useResetForm() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['resetForm']\n  >(ctx => ctx.resetForm);\n}\n\n/**\n *\n * Returns whether the form submission is currently being attempted\n * @public\n */\nexport function useIsValid() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['isValid']\n  >(ctx => ctx.isValid);\n}\n\n/**\n * Returns whether the form is dirty\n * @public\n */\nexport function useIsDirty() {\n  return useFormikContextSelector<unknown, FormikContextType<unknown>['dirty']>(\n    ctx => ctx.dirty\n  );\n}\n\n/**\n * Returns a function to imperatively validate the entire form\n * @public\n */\nexport function useValidateForm() {\n  return useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['validateForm']\n  >(ctx => ctx.validateForm);\n}\n\n/**\n * Returns a function to imperatively validate a field\n * @public\n */\nexport function useValidateField(fieldName?: string) {\n  const validateField = useFormikContextSelector<\n    unknown,\n    FormikContextType<unknown>['validateField']\n  >(ctx => ctx.validateField);\n  return React.useCallback(() => {\n    return fieldName ? validateField(fieldName) : validateField;\n  }, [fieldName]);\n}\n\nfunction useFieldMeta<Values>(name: string) {\n  const [value] = useFieldValue<Values>(name);\n  const [touched] = useFieldTouched<Values>(name);\n  const [error] = useFieldError<Values>(name);\n  const initialValue = useFieldInitialValue<Values>(name);\n  const initialTouched = useFieldInitialTouched<Values>(name);\n  const initialError = useFieldInitialError<Values>(name);\n  return {\n    value,\n    touched,\n    error,\n    initialValue,\n    initialTouched,\n    initialError,\n  };\n}\n","import * as React from 'react';\nimport { useContextSelector } from 'use-context-selector';\nimport { FormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(function Form(\n  props: FormikFormProps,\n  ref\n) {\n  // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n  // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n  const { action, ...rest } = props;\n  const _action = action || '#';\n  const handleReset = useContextSelector(FormikContext, ctx => ctx.handleReset);\n  const handleSubmit = useContextSelector(\n    FormikContext,\n    ctx => ctx.handleSubmit\n  );\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      ref={ref}\n      onReset={handleReset}\n      action={_action}\n      {...rest}\n    />\n  );\n});\n\nForm.displayName = 'Form';\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport invariant from 'tiny-warning';\nimport { FormikConsumer } from './FormikContext';\nimport { FormikContextType } from './types';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer\n      children={(formik: FormikContextType<Values>) => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    />\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  setIn,\n  isEmptyArray,\n} from './utils';\nimport isEqual from 'react-fast-compare';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (\n  arrayLike: ArrayLike<any>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n      let updateTouched =\n        typeof alterTouched === 'function' ? alterTouched : fn;\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { useFieldError, useFieldTouched } from './hooks';\nimport { isFunction } from './utils';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nexport function ErrorMessage({\n  component,\n  render,\n  children,\n  name,\n  ...rest\n}: ErrorMessageProps): JSX.Element | null {\n  const [touch] = useFieldTouched(name);\n  const [error] = useFieldError(name);\n  return !!touch && !!error\n    ? render\n      ? isFunction(render)\n        ? render(error)\n        : null\n      : children\n      ? isFunction(children)\n        ? children(error)\n        : null\n      : component\n      ? React.createElement(component, rest as any, error)\n      : error\n    : null;\n}\n","import * as React from 'react';\nimport invariant from 'tiny-warning';\nimport {\n  FieldInputProps,\n  FieldMetaProps,\n  GenericFieldHTMLAttributes,\n  SharedFieldProps,\n} from './types';\nimport { useField, UseFieldProps } from './hooks';\nimport { isEmptyChildren, isFunction } from './utils';\n\nexport type FastFieldProps<FieldValue = any> = {\n  field: FieldInputProps<FieldValue>;\n  meta: FieldMetaProps<FieldValue>;\n};\n\nexport type FastFieldConfig<V = any> = UseFieldProps<V> &\n  SharedFieldProps<FastFieldProps<V>> & {\n    /**\n     * Override FastField's default shouldComponentUpdate\n     * @deprecated\n     */\n    shouldUpdate?: (nextProps: any, props: {}) => boolean;\n  };\n\nexport function FastField<V = any>({\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  shouldUpdate,\n  ...props\n}: GenericFieldHTMLAttributes & FastFieldConfig<V>): any {\n  React.useEffect(() => {\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n    invariant(\n      !shouldUpdate,\n      `<FastField shouldUpdate> has been deprecated. Please create a custom component with useField and React.memo() instead.`\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  const [field, meta] = useField<V>(props);\n\n  if (render) {\n    // @ts-ignore @todo types\n    return isFunction(render) ? render({ field, meta }) : null;\n  }\n\n  if (isFunction(children)) {\n    // @ts-ignore @todo types\n    return children({ field, meta });\n  }\n\n  const { innerRef, parse, format, formatOnBlur, validate, ...rest } = props;\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    return React.createElement(component, { field, meta, ...rest }, children);\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n  return React.createElement(\n    asElement as React.FunctionComponent<FieldInputProps<V>>,\n    { ...field, ...rest },\n    children\n  );\n}\n","import * as React from 'react';\nimport invariant from 'tiny-warning';\nimport { useFormikContext } from './FormikContext';\nimport {\n  FieldInputProps,\n  FieldMetaProps,\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  SharedFieldProps,\n} from './types';\nimport { useField, UseFieldProps } from './hooks';\nimport { isEmptyChildren, isFunction } from './utils';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport type FieldConfig<FieldValue = any, FormValues = any> = UseFieldProps<\n  FieldValue\n> &\n  SharedFieldProps<FieldProps<FieldValue, FormValues>>;\n\nexport function Field<FieldValue = any, FormValues = any>({\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  ...props\n}: GenericFieldHTMLAttributes & FieldConfig<FieldValue, FormValues>): any {\n  React.useEffect(() => {\n    invariant(\n      !render,\n      `<Field render> has been deprecated. Please use a child callback function instead: <Field name={${name}}>{props => ...}</Field> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <FastField children> will be ignored'\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  const [field, meta] = useField<FieldValue>(props);\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n    ...formik\n  } = useFormikContext<FormValues>();\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    // @ts-ignore @todo types\n    return isFunction(render) ? render({ ...legacyBag, meta }) : null;\n  }\n\n  if (isFunction(children)) {\n    // @ts-ignore @todo types\n    return children({ ...legacyBag, meta });\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, parse, format, formatOnBlur, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n  const { parse, format, formatOnBlur, ...rest } = props;\n  return React.createElement(\n    asElement as React.ComponentType<FieldInputProps<FieldValue>>,\n    { ...field, ...rest },\n    children\n  );\n}\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik helpers + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form status\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isNaN","isEmptyChildren","children","React","count","isPromise","then","isInputEvent","target","isReactNative","window","navigator","product","getIn","key","def","p","path","toPath","undefined","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","getSelectedValues","options","result","index","option","selected","push","getValueForCheckbox","currentValue","checked","valueProp","Boolean","currentArrayOfValues","isValueInArray","indexOf","concat","defaultParseFn","_name","numberParseFn","parsed","parseFloat","defaultFormatFn","getValueFromEvent","event","valueState","nativeEvent","text","currentTarget","multiple","test","type","FormikContext","createContext","FormikProvider","Provider","useFormikContext","useContext","FormikConsumer","formik","invariant","useFormikContextSelector","selector","useContextSelector","formikReducer","state","msg","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","current","dispatch","runValidateHandler","Promise","resolve","reject","maybePromisedErrors","validate","actualException","runValidationSchema","validationSchema","schema","promise","validateAt","validateYupSchema","err","name","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","runAllValidations","deepmerge","arrayMerge","validateFormWithHighPriority","useEventCallback","combinedErrors","resetForm","nextState","dispatchFn","onReset","maybePromisedOnReset","imperativeMethods","validateField","maybePromise","x","error","registerField","unregisterField","setTouched","shouldValidate","setErrors","setValues","resolvedValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","maybePath","persist","id","handleChange","eventOrPath","setFieldTouched","executeBlur","e","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","isInstanceOfError","Error","promiseOrUndefined","executeSubmit","_errors","handleSubmit","preventDefault","stopPropagation","reason","console","warn","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","fieldName","getFieldProps","nameOrOptions","isAnObject","touchedState","onChange","onBlur","is","as","parse","format","formatOnBlur","eventOrValue","dirty","isValid","Formik","formikbag","component","render","innerRef","only","yupError","inner","message","sync","context","validateData","prepareDataForValidation","abortEarly","data","hasOwnProperty","isPlainObject","source","destination","forEach","shouldClone","isMergeableObject","useIsomorphicLayoutEffect","document","createElement","fn","ref","args","apply","useSetFieldValue","ctx","useSetFieldTouched","useField","validateFn","c","meta","useFieldValue","useFieldTouched","useFieldError","useFieldInitialValue","useFieldInitialTouched","useFieldInitialError","isTouched","Form","action","_action","connect","Comp","C","componentDisplayName","displayName","constructor","WrappedComponent","hoistNonReactStatics","move","array","from","to","copy","copyArrayLike","splice","swap","arrayLike","indexA","indexB","a","insert","replace","maxIndex","parseInt","max","el","FieldArrayInner","alterTouched","alterErrors","_this","prevState","updateErrors","updateTouched","fieldError","fieldTouched","updateArrayField","cloneDeep","arr","unshift","remove","pop","bind","componentDidUpdate","prevProps","this","tmp","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","form","FieldArray","touch","shouldUpdate","asElement","legacyBag","doc","activeElement","body","mapPropsToValues","vanillaProps","config","Component","actions","formikProps","mapPropsToStatus","mapPropsToErrors","mapPropsToTouched","renderFormComponent"],"mappings":"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"}